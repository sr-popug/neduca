import { issuesI } from '@/types/issuesTypes'

const issuesJs: issuesI[] = [
  {
    id: 1,
    difficulty: 'easy',
    title: '1 копия - Найдите следующий идеальный квадрат!',
    quest: [
      {
        type: 'text',
        text: 'Вы, возможно, знаете несколько довольно больших идеальных квадратов. Но что насчет СЛЕДУЮЩЕГО?',
      },
      {
        type: 'text',
        text: 'Завершите <span>findNextSquare</span> метод, который находит следующий целочисленный полный квадрат после переданного в качестве параметра. Напомним, что целочисленный полный квадрат — это целое число <span>n</span>, такое, что <span>sqrt(n)</span> также является целым числом.',
      },
      {
        type: 'code',
        text: 'console.log(1) // 121 --> 144',
      },
      {
        type: 'text',
        text: 'Если аргумент сам по себе не является точным квадратом, то верните либо -1 пустое значение, например None, или null, в зависимости от вашего языка. Вы можете предположить, что аргумент неотрицательный.',
      },
    ],
    example: `
121 --> 144
625 --> 676
114 --> -1  #  Потому что 114 это не идеальный квадрат
`,
    defaultCode: `
function findNextSquare(sq) {
  // Верните следующий квадрат, если sq - идеальный квадрат, -1 в противном случае
  return -1
}
	 `,
    testCode: `function findNextSquare2(sq) {
    if( !Number.isInteger(Math.sqrt(sq)) ) {
        return -1
    }

    let sqNew = Math.sqrt(sq) + 1

    return sqNew * sqNew

}`,
    testValues: ['121', '625', '114', '676', '144', '132', '115'],
  },
  {
    id: 1,
    difficulty: 'easy',
    title: 'Найдите следующий идеальный квадрат!',
    quest: [
      {
        type: 'text',
        text: 'Вы, возможно, знаете несколько довольно больших идеальных квадратов. Но что насчет СЛЕДУЮЩЕГО?',
      },
      {
        type: 'text',
        text: 'Завершите <span>findNextSquare</span> метод, который находит следующий целочисленный полный квадрат после переданного в качестве параметра. Напомним, что целочисленный полный квадрат — это целое число <span>n</span>, такое, что <span>sqrt(n)</span> также является целым числом.',
      },
      {
        type: 'code',
        text: 'console.log(1) // 121 --> 144',
      },
      {
        type: 'text',
        text: 'Если аргумент сам по себе не является точным квадратом, то верните либо -1 пустое значение, например None, или null, в зависимости от вашего языка. Вы можете предположить, что аргумент неотрицательный.',
      },
    ],
    example: `
121 --> 144
625 --> 676
114 --> -1  #  Потому что 114 это не идеальный квадрат
`,
    defaultCode: `
function findNextSquare(sq) {
  // Верните следующий квадрат, если sq - идеальный квадрат, -1 в противном случае
  return -1
}
	 `,
    testCode: `function findNextSquare2(sq) {
    if( !Number.isInteger(Math.sqrt(sq)) ) {
        return -1
    }

    let sqNew = Math.sqrt(sq) + 1

    return sqNew * sqNew

}`,
    testValues: ['121', '625', '114', '676', '144', '132', '115'],
  },
  {
    id: 2,
    difficulty: 'easy',
    title: '2 копия -Найдите следующий идеальный квадрат!',
    quest: [
      {
        type: 'text',
        text: 'Вы, возможно, знаете несколько довольно больших идеальных квадратов. Но что насчет СЛЕДУЮЩЕГО?',
      },
      {
        type: 'text',
        text: 'Завершите <span>findNextSquare</span> метод, который находит следующий целочисленный полный квадрат после переданного в качестве параметра. Напомним, что целочисленный полный квадрат — это целое число <span>n</span>, такое, что <span>sqrt(n)</span> также является целым числом.',
      },
      {
        type: 'code',
        text: 'console.log(1) // 121 --> 144',
      },
      {
        type: 'text',
        text: 'Если аргумент сам по себе не является точным квадратом, то верните либо -1 пустое значение, например None, или null, в зависимости от вашего языка. Вы можете предположить, что аргумент неотрицательный.',
      },
    ],
    example: `
121 --> 144
625 --> 676
114 --> -1  #  Потому что 114 это не идеальный квадрат
`,
    defaultCode: `
function findNextSquare(sq) {
  // Верните следующий квадрат, если sq - идеальный квадрат, -1 в противном случае
  return -1
}
	 `,
    testCode: `function findNextSquare2(sq) {
    if( !Number.isInteger(Math.sqrt(sq)) ) {
        return -1
    }

    let sqNew = Math.sqrt(sq) + 1

    return sqNew * sqNew

}`,
    testValues: ['121', '625', '114', '676', '144', '132', '115'],
  },
  {
    id: 3,
    difficulty: 'medium',
    title: '3 копия -Найдите следующий идеальный квадрат!',
    quest: [
      {
        type: 'text',
        text: 'Вы, возможно, знаете несколько довольно больших идеальных квадратов. Но что насчет СЛЕДУЮЩЕГО?',
      },
      {
        type: 'text',
        text: 'Завершите <span>findNextSquare</span> метод, который находит следующий целочисленный полный квадрат после переданного в качестве параметра. Напомним, что целочисленный полный квадрат — это целое число <span>n</span>, такое, что <span>sqrt(n)</span> также является целым числом.',
      },
      {
        type: 'code',
        text: 'console.log(1) // 121 --> 144',
      },
      {
        type: 'text',
        text: 'Если аргумент сам по себе не является точным квадратом, то верните либо -1 пустое значение, например None, или null, в зависимости от вашего языка. Вы можете предположить, что аргумент неотрицательный.',
      },
    ],
    example: `
121 --> 144
625 --> 676
114 --> -1  #  Потому что 114 это не идеальный квадрат
`,
    defaultCode: `
function findNextSquare(sq) {
  // Верните следующий квадрат, если sq - идеальный квадрат, -1 в противном случае
  return -1
}
	 `,
    testCode: `function findNextSquare2(sq) {
    if( !Number.isInteger(Math.sqrt(sq)) ) {
        return -1
    }

    let sqNew = Math.sqrt(sq) + 1

    return sqNew * sqNew

}`,

    testValues: ['121', '625', '114', '676', '144', '132', '115'],
  },

  {
    id: 4,
    difficulty: 'medium',
    title: '4 копия -Найдите следующий идеальный квадрат!',
    quest: [
      {
        type: 'text',
        text: 'Вы, возможно, знаете несколько довольно больших идеальных квадратов. Но что насчет СЛЕДУЮЩЕГО?',
      },
      {
        type: 'text',
        text: 'Завершите <span>findNextSquare</span> метод, который находит следующий целочисленный полный квадрат после переданного в качестве параметра. Напомним, что целочисленный полный квадрат — это целое число <span>n</span>, такое, что <span>sqrt(n)</span> также является целым числом.',
      },
      {
        type: 'code',
        text: 'console.log(1) // 121 --> 144',
      },
      {
        type: 'text',
        text: 'Если аргумент сам по себе не является точным квадратом, то верните либо -1 пустое значение, например None, или null, в зависимости от вашего языка. Вы можете предположить, что аргумент неотрицательный.',
      },
    ],
    example: `
121 --> 144
625 --> 676
114 --> -1  #  Потому что 114 это не идеальный квадрат
`,
    defaultCode: `
function findNextSquare(sq) {
  // Верните следующий квадрат, если sq - идеальный квадрат, -1 в противном случае
  return -1
}
	 `,
    testCode: `function findNextSquare2(sq) {
    if( !Number.isInteger(Math.sqrt(sq)) ) {
        return -1
    }

    let sqNew = Math.sqrt(sq) + 1

    return sqNew * sqNew

}`,

    testValues: ['121', '625', '114', '676', '144', '132', '115'],
  },
  {
    id: 5,
    difficulty: 'hard',
    title: '5 копия -Найдите следующий идеальный квадрат!',
    quest: [
      {
        type: 'text',
        text: 'Вы, возможно, знаете несколько довольно больших идеальных квадратов. Но что насчет СЛЕДУЮЩЕГО?',
      },
      {
        type: 'text',
        text: 'Завершите <span>findNextSquare</span> метод, который находит следующий целочисленный полный квадрат после переданного в качестве параметра. Напомним, что целочисленный полный квадрат — это целое число <span>n</span>, такое, что <span>sqrt(n)</span> также является целым числом.',
      },
      {
        type: 'code',
        text: 'console.log(1) // 121 --> 144',
      },
      {
        type: 'text',
        text: 'Если аргумент сам по себе не является точным квадратом, то верните либо -1 пустое значение, например None, или null, в зависимости от вашего языка. Вы можете предположить, что аргумент неотрицательный.',
      },
    ],
    example: `
121 --> 144
625 --> 676
114 --> -1  #  Потому что 114 это не идеальный квадрат
`,
    defaultCode: `
function findNextSquare(sq) {
  // Верните следующий квадрат, если sq - идеальный квадрат, -1 в противном случае
  return -1
}
	 `,
    testCode: `function findNextSquare2(sq) {
    if( !Number.isInteger(Math.sqrt(sq)) ) {
        return -1
    }

    let sqNew = Math.sqrt(sq) + 1

    return sqNew * sqNew

}`,

    testValues: ['121', '625', '114', '676', '144', '132', '115'],
  },
  {
    id: 6,
    difficulty: 'hard',
    title: '6 копия -Найдите следующий идеальный квадрат!',
    quest: [
      {
        type: 'text',
        text: 'Вы, возможно, знаете несколько довольно больших идеальных квадратов. Но что насчет СЛЕДУЮЩЕГО?',
      },
      {
        type: 'text',
        text: 'Завершите <span>findNextSquare</span> метод, который находит следующий целочисленный полный квадрат после переданного в качестве параметра. Напомним, что целочисленный полный квадрат — это целое число <span>n</span>, такое, что <span>sqrt(n)</span> также является целым числом.',
      },
      {
        type: 'code',
        text: 'console.log(1) // 121 --> 144',
      },
      {
        type: 'text',
        text: 'Если аргумент сам по себе не является точным квадратом, то верните либо -1 пустое значение, например None, или null, в зависимости от вашего языка. Вы можете предположить, что аргумент неотрицательный.',
      },
    ],
    example: `
121 --> 144
625 --> 676
114 --> -1  #  Потому что 114 это не идеальный квадрат
`,
    defaultCode: `
function findNextSquare(sq) {
  // Верните следующий квадрат, если sq - идеальный квадрат, -1 в противном случае
  return -1
}
	 `,
    testCode: `function findNextSquare2(sq) {
    if( !Number.isInteger(Math.sqrt(sq)) ) {
        return -1
    }

    let sqNew = Math.sqrt(sq) + 1

    return sqNew * sqNew

}`,

    testValues: ['121', '625', '114', '676', '144', '132', '115'],
  },
  // {
  //   id: 2,
  //   difficulty: '',
  //   title: '',
  //   quest: [
  //     {
  //       type: 'text',
  //       text: '',
  //     },
  //     {
  //       type: 'code',
  //       text: '',
  //     },
  //   ],
  //   example: ``,
  //   defaultCode: ``,
  //   testCode: ``,
  //   testValues: [],
  // },
]
const issuesReact = issuesJs

export default issuesJs
export { issuesReact }
